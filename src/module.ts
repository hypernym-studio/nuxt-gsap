import {
  defineNuxtModule,
  addTemplate,
  addPluginTemplate,
  addImports,
  resolveAlias,
} from '@nuxt/kit'
import { serialize } from './utils/serialize'
import { name, version, configKey, compatibility } from './meta'
import type { ModuleOptions } from './types/module'

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name,
    version,
    configKey,
    compatibility,
  },

  defaults: {
    provide: true,
    autoImport: true,
  },

  setup(options, nuxt) {
    const {
      provide,
      composables,
      autoImport,
      extraPlugins: plugins,
      extraEases: eases,
      clubPlugins: club,
      registerEffects: regEffects,
      registerEases: regEases,
    } = options

    const fileBanner = `// Generated by ${name}`
    const pluginEffect: string[] = []
    const pluginEase: string[] = []

    // Global Effects
    if (regEffects) {
      for (const effect of regEffects) {
        pluginEffect.push(`gsap.registerEffect(${serialize(effect)});`)
      }
    }

    // Global Eases
    if (regEases) {
      for (const ease of regEases) {
        pluginEase.push(
          `gsap.registerEase(${serialize(ease.name)}, ${serialize(
            ease.ease,
          )});`,
        )
      }
    }

    if (provide) {
      const templateName = 'gsapPlugin'
      const pluginImport: string[] = []
      const pluginRegister: string[] = []
      const pluginType: string[] = []
      const pluginClient: string[] = []

      const addPlugin = ({
        name,
        subpath,
      }: {
        name: string
        subpath?: string
      }) => {
        pluginImport.push(
          `import { ${name} } from 'gsap/${subpath ? subpath : name}';`,
        )
        pluginRegister.push(`${name}`)
        pluginType.push(`${name}: typeof ${name};`)
      }

      // Extra Plugins
      if (plugins?.flip) addPlugin({ name: 'Flip' })
      if (plugins?.scrollTrigger) addPlugin({ name: 'ScrollTrigger' })
      if (plugins?.observer) addPlugin({ name: 'Observer' })
      if (plugins?.scrollTo) addPlugin({ name: 'ScrollToPlugin' })
      if (plugins?.draggable) addPlugin({ name: 'Draggable' })
      if (plugins?.easel) addPlugin({ name: 'EaselPlugin' })
      if (plugins?.motionPath) addPlugin({ name: 'MotionPathPlugin' })
      if (plugins?.pixi) addPlugin({ name: 'PixiPlugin' })
      if (plugins?.text) addPlugin({ name: 'TextPlugin' })

      // Extra Eases
      if (eases?.expoScale)
        addPlugin({ name: 'ExpoScaleEase', subpath: 'EasePack' })
      if (eases?.rough) addPlugin({ name: 'RoughEase', subpath: 'EasePack' })
      if (eases?.slowMo) addPlugin({ name: 'SlowMo', subpath: 'EasePack' })
      if (eases?.custom) addPlugin({ name: 'CustomEase' })

      // Club Plugins
      if (club?.drawSvg) addPlugin({ name: 'DrawSVGPlugin' })
      if (club?.scrollSmoother) addPlugin({ name: 'ScrollSmoother' })
      if (club?.gsDevTools) addPlugin({ name: 'GSDevTools' })
      if (club?.inertia) addPlugin({ name: 'InertiaPlugin' })
      if (club?.morphSvg) addPlugin({ name: 'MorphSVGPlugin' })
      if (club?.motionPathHelper) addPlugin({ name: 'MotionPathHelper' })
      if (club?.physics2d) addPlugin({ name: 'Physics2DPlugin' })
      if (club?.physicsProps) addPlugin({ name: 'PhysicsPropsPlugin' })
      if (club?.scrambleText) addPlugin({ name: 'ScrambleTextPlugin' })
      if (club?.splitText) addPlugin({ name: 'SplitText' })
      if (club?.customBounce) addPlugin({ name: 'CustomBounce' })
      if (club?.customWiggle) addPlugin({ name: 'CustomWiggle' })

      // Client mode
      if (plugins || eases || club || regEffects || regEases) {
        const registerPlugin = pluginRegister.length
          ? `gsap.registerPlugin(${pluginRegister.join(',')});`
          : ''

        pluginClient.push(
          `if(process.client) {`,
          `  ${registerPlugin}`,
          `  ${pluginEffect.join('\n')}`,
          `  ${pluginEase.join('\n')}`,
          `}`,
        )
      }

      addTemplate({
        filename: `${templateName}.d.ts`,
        write: true,
        getContents: () =>
          [
            fileBanner,
            `import { Plugin } from '#app';`,
            `import { gsap } from 'gsap';`,
            `${pluginImport.join('\n')}`,
            `declare const plugin: Plugin<{`,
            `  gsap: typeof gsap;`,
            `  ${pluginType.join('\n')}`,
            `}>;`,
            `export default plugin;`,
          ].join('\n'),
      })

      addPluginTemplate({
        filename: `${templateName}.mjs`,
        write: true,
        getContents: () =>
          [
            fileBanner,
            `import { defineNuxtPlugin } from '#app';`,
            `import { gsap } from 'gsap';`,
            `${pluginImport.join('\n')}`,
            `const plugin = defineNuxtPlugin(() => {`,
            `  ${pluginClient.join('\n')}`,
            `  return {`,
            `    provide: {`,
            `      gsap,`,
            `      ${pluginRegister.join(',\n')}`,
            `    }`,
            `  }`,
            `})`,
            `export default plugin;`,
          ].join('\n'),
      })
    }

    if (composables) {
      const templateName = 'gsapComposables'
      const pluginImport: string[] = []
      const pluginRegister: string[] = []
      const pluginDeclare: string[] = []
      const pluginType: string[] = []

      const addComposable = ({
        name,
        subpath,
      }: {
        name: string
        subpath?: string
      }) => {
        pluginImport.push(
          `import { ${name} } from 'gsap/${subpath ? subpath : name}';`,
        )
        pluginRegister.push(`${name}`)
        pluginDeclare.push(`export const use${name} = ${name};`)
        pluginType.push(`export declare const use${name}: typeof ${name};`)
      }

      const alias = resolveAlias(`${nuxt.options.buildDir}/${templateName}`)
      nuxt.options.alias[`#${configKey}`] = alias

      // Core
      if (autoImport) addImports({ name: 'useGsap', from: alias })

      // Extra Plugins
      if (plugins?.flip) {
        addComposable({ name: 'Flip' })
        if (autoImport) addImports({ name: 'useFlip', from: alias })
      }
      if (plugins?.scrollTrigger) {
        addComposable({ name: 'ScrollTrigger' })
        if (autoImport) addImports({ name: 'useScrollTrigger', from: alias })
      }
      if (plugins?.observer) {
        addComposable({ name: 'Observer' })
        if (autoImport) addImports({ name: 'useObserver', from: alias })
      }
      if (plugins?.scrollTo) {
        addComposable({ name: 'ScrollToPlugin' })
        if (autoImport) addImports({ name: 'useScrollToPlugin', from: alias })
      }
      if (plugins?.draggable) {
        addComposable({ name: 'Draggable' })
        if (autoImport) addImports({ name: 'useDraggable', from: alias })
      }
      if (plugins?.easel) {
        addComposable({ name: 'EaselPlugin' })
        if (autoImport) addImports({ name: 'useEaselPlugin', from: alias })
      }
      if (plugins?.motionPath) {
        addComposable({ name: 'MotionPathPlugin' })
        if (autoImport) addImports({ name: 'useMotionPathPlugin', from: alias })
      }
      if (plugins?.pixi) {
        addComposable({ name: 'PixiPlugin' })
        if (autoImport) addImports({ name: 'usePixiPlugin', from: alias })
      }
      if (plugins?.text) {
        addComposable({ name: 'TextPlugin' })
        if (autoImport) addImports({ name: 'useTextPlugin', from: alias })
      }

      // Extra Eases
      if (eases?.expoScale) {
        addComposable({ name: 'ExpoScaleEase', subpath: 'EasePack' })
        if (autoImport) addImports({ name: 'useExpoScaleEase', from: alias })
      }
      if (eases?.rough) {
        addComposable({ name: 'RoughEase', subpath: 'EasePack' })
        if (autoImport) addImports({ name: 'useRoughEase', from: alias })
      }
      if (eases?.slowMo) {
        addComposable({ name: 'SlowMo', subpath: 'EasePack' })
        if (autoImport) addImports({ name: 'useSlowMo', from: alias })
      }
      if (eases?.custom) {
        addComposable({ name: 'CustomEase' })
        if (autoImport) addImports({ name: 'useCustomEase', from: alias })
      }

      // Club Plugins
      if (club?.drawSvg) {
        addComposable({ name: 'DrawSVGPlugin' })
        if (autoImport) addImports({ name: 'useDrawSVGPlugin', from: alias })
      }
      if (club?.scrollSmoother) {
        addComposable({ name: 'ScrollSmoother' })
        if (autoImport) addImports({ name: 'useScrollSmoother', from: alias })
      }
      if (club?.gsDevTools) {
        addComposable({ name: 'GSDevTools' })
        if (autoImport) addImports({ name: 'useGSDevTools', from: alias })
      }
      if (club?.inertia) {
        addComposable({ name: 'InertiaPlugin' })
        if (autoImport) addImports({ name: 'useInertiaPlugin', from: alias })
      }
      if (club?.morphSvg) {
        addComposable({ name: 'MorphSVGPlugin' })
        if (autoImport) addImports({ name: 'useMorphSVGPlugin', from: alias })
      }
      if (club?.motionPathHelper) {
        addComposable({ name: 'MotionPathHelper' })
        if (autoImport) addImports({ name: 'useMotionPathHelper', from: alias })
      }
      if (club?.physics2d) {
        addComposable({ name: 'Physics2DPlugin' })
        if (autoImport) addImports({ name: 'usePhysics2DPlugin', from: alias })
      }
      if (club?.physicsProps) {
        addComposable({ name: 'PhysicsPropsPlugin' })
        if (autoImport)
          addImports({ name: 'usePhysicsPropsPlugin', from: alias })
      }
      if (club?.scrambleText) {
        addComposable({ name: 'ScrambleTextPlugin' })
        if (autoImport)
          addImports({ name: 'useScrambleTextPlugin', from: alias })
      }
      if (club?.splitText) {
        addComposable({ name: 'SplitText' })
        if (autoImport) addImports({ name: 'useSplitText', from: alias })
      }
      if (club?.customBounce) {
        addComposable({ name: 'CustomBounce' })
        if (autoImport) addImports({ name: 'useCustomBounce', from: alias })
      }
      if (club?.customWiggle) {
        addComposable({ name: 'CustomWiggle' })
        if (autoImport) addImports({ name: 'useCustomWiggle', from: alias })
      }

      addTemplate({
        filename: `${templateName}.d.ts`,
        write: true,
        getContents: () =>
          [
            fileBanner,
            `import { gsap } from 'gsap';`,
            `${pluginImport.join('\n')}`,
            `export declare const useGsap: typeof gsap;`,
            `${pluginType.join('\n')}`,
          ].join('\n'),
      })

      const registerPlugin = pluginRegister.length
        ? `gsap.registerPlugin(${pluginRegister.join(',')});`
        : ''

      addTemplate({
        filename: `${templateName}.mjs`,
        write: true,
        getContents: () =>
          [
            fileBanner,
            `import { gsap } from 'gsap';`,
            `${pluginImport.join('\n')}`,
            `${registerPlugin}`,
            `${pluginEffect.join('\n')}`,
            `${pluginEase.join('\n')}`,
            `export const useGsap = gsap;`,
            `${pluginDeclare.join('\n')}`,
          ].join('\n'),
      })
    }
  },
})
